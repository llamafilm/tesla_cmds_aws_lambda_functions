AWSTemplateFormatVersion: 2010-09-09
Description: 'Deliver iOS Shortcuts requests to Tesla API using Lambda functions'

Parameters:
  Env:
    Type: String
    Default: test
    AllowedValues:
      - test
      - prod

Resources:
  LogGroup1:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub /aws/lambda/tesla-shortcuts-frontend-${Env}
  LogGroup2:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub /aws/lambda/tesla-shortcuts-backend-${Env}
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      AssumeRolePolicyDocument: >
        {"Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal":{"Service":"lambda.amazonaws.com"},
            "Action":"sts:AssumeRole"}]}
      Policies:
        -
          PolicyName: inline
          PolicyDocument: !Sub >
              {"Version": "2012-10-17",
                "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream",
                  "SNS:Publish"],
                "Resource": [
                  "${LogGroup1.Arn}",
                  "${LogGroup2.Arn}",
                  "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:tesla-shortcuts-queue-${Env}"]}]}
  LambdaBackend:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Receive HTTP requests via iOS Shortcuts'
      FunctionName: !Sub tesla-shortcuts-backend-${Env}
      Handler: lambda_function.lambda_handler
      Architectures:
        - arm64
      Code:
        S3Bucket: llamafilm.com
        S3Key: github/tesla_cmds_aws_lambda_backend.zip
      MemorySize: 128
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.9
      Timeout: 3
      TracingConfig:
        Mode: PassThrough
      EphemeralStorage:
        Size: 512
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub tesla-shortcuts-queue-${Env}
      KmsMasterKeyId: alias/aws/sns
      FifoTopic: false
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LambdaBackend.Arn
  LambdaFrontend:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Send HTTP requests to Tesla API'
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
      FunctionName: !Sub tesla-shortcuts-frontend-${Env}
      Handler: lambda_function.lambda_handler
      Architectures:
        - arm64
      Code:
        S3Bucket: llamafilm.com
        S3Key: github/tesla_cmds_aws_lambda_frontend.zip
      MemorySize: 128
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.9
      Timeout: 3
      TracingConfig:
        Mode: PassThrough
      EphemeralStorage:
        Size: 512
  PermissionSNS:
    Type: "AWS::Lambda::Permission"
    Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !GetAtt LambdaBackend.Arn
        Principal: "sns.amazonaws.com"
        SourceArn: !Ref SNSTopic
  PermissionHTTP:
    Type: "AWS::Lambda::Permission"
    Properties:
        Action: "lambda:InvokeFunctionUrl"
        FunctionName: !GetAtt LambdaFrontend.Arn
        Principal: "*"
        FunctionUrlAuthType: NONE
  LambdaURL:
    Type: "AWS::Lambda::Url"
    Properties:
        TargetFunctionArn: !GetAtt LambdaFrontend.Arn
        AuthType: "NONE"
  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
        TopicArn: !Ref SNSTopic
        Endpoint: !GetAtt LambdaBackend.Arn
        Protocol: "lambda"

Outputs:
  LambdaURL:
    Description: Public HTTPs endpoint to trigger function
    Value: !GetAtt LambdaURL.FunctionUrl
